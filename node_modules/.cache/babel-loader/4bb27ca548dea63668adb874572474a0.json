{"ast":null,"code":"var _jsxFileName = \"D:\\\\fullstack2025\\\\courseRgeistration\\\\src\\\\App.js\";\nimport React, { lazy, useState } from 'react';\nimport { BrowserRouter as Router, Switch, Route, Redirect } from 'react-router-dom';\nimport AccessibleNavigationAnnouncer from './components/AccessibleNavigationAnnouncer';\nconst Layout = lazy(() => import('./containers/Layout'));\nconst Login = lazy(() => import('./pages/Login'));\n\nfunction App() {\n  // State to track whether the user is authenticated\n  const [isAuthenticated, setIsAuthenticated] = useState(false); // Function to handle successful login\n\n  const handleLogin = () => {\n    // Perform login logic here\n    // For now, just set isAuthenticated to true\n    setIsAuthenticated(true);\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Router, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(AccessibleNavigationAnnouncer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Switch, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Route, {\n    exact: true,\n    path: \"/\",\n    render: props => /*#__PURE__*/React.createElement(Login, Object.assign({}, props, {\n      onLogin: handleLogin,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 52\n      }\n    })),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(PrivateRoute, {\n    path: \"/dashboard\",\n    component: Layout,\n    isAuthenticated: isAuthenticated,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(Redirect, {\n    to: \"/\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 11\n    }\n  }))));\n} // PrivateRoute component to render the component only if the user is authenticated\n\n\nfunction PrivateRoute({\n  component: Component,\n  isAuthenticated,\n  ...rest\n}) {\n  return /*#__PURE__*/React.createElement(Route, Object.assign({}, rest, {\n    render: props => isAuthenticated ? /*#__PURE__*/React.createElement(Component, Object.assign({}, props, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 11\n      }\n    })) : /*#__PURE__*/React.createElement(Redirect, {\n      to: \"/\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 11\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 5\n    }\n  }));\n}\n\nexport default App;","map":{"version":3,"sources":["D:/fullstack2025/courseRgeistration/src/App.js"],"names":["React","lazy","useState","BrowserRouter","Router","Switch","Route","Redirect","AccessibleNavigationAnnouncer","Layout","Login","App","isAuthenticated","setIsAuthenticated","handleLogin","props","PrivateRoute","component","Component","rest"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,IAAhB,EAAsBC,QAAtB,QAAsC,OAAtC;AACA,SAASC,aAAa,IAAIC,MAA1B,EAAkCC,MAAlC,EAA0CC,KAA1C,EAAiDC,QAAjD,QAAiE,kBAAjE;AACA,OAAOC,6BAAP,MAA0C,4CAA1C;AAEA,MAAMC,MAAM,GAAGR,IAAI,CAAC,MAAM,OAAO,qBAAP,CAAP,CAAnB;AACA,MAAMS,KAAK,GAAGT,IAAI,CAAC,MAAM,OAAO,eAAP,CAAP,CAAlB;;AAEA,SAASU,GAAT,GAAe;AACb;AACA,QAAM,CAACC,eAAD,EAAkBC,kBAAlB,IAAwCX,QAAQ,CAAC,KAAD,CAAtD,CAFa,CAIb;;AACA,QAAMY,WAAW,GAAG,MAAM;AACxB;AACA;AACAD,IAAAA,kBAAkB,CAAC,IAAD,CAAlB;AACD,GAJD;;AAMA,sBACE,uDACE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,6BAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAEE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAEE,oBAAC,KAAD;AAAO,IAAA,KAAK,MAAZ;AAAa,IAAA,IAAI,EAAC,GAAlB;AAAsB,IAAA,MAAM,EAAGE,KAAD,iBAAW,oBAAC,KAAD,oBAAWA,KAAX;AAAkB,MAAA,OAAO,EAAED,WAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,eAIE,oBAAC,YAAD;AAAc,IAAA,IAAI,EAAC,YAAnB;AAAgC,IAAA,SAAS,EAAEL,MAA3C;AAAmD,IAAA,eAAe,EAAEG,eAApE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJF,eAME,oBAAC,QAAD;AAAU,IAAA,EAAE,EAAC,GAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IANF,CAFF,CADF,CADF;AAeD,C,CAED;;;AACA,SAASI,YAAT,CAAsB;AAAEC,EAAAA,SAAS,EAAEC,SAAb;AAAwBN,EAAAA,eAAxB;AAAyC,KAAGO;AAA5C,CAAtB,EAA0E;AACxE,sBACE,oBAAC,KAAD,oBACMA,IADN;AAEE,IAAA,MAAM,EAAGJ,KAAD,IACNH,eAAe,gBACb,oBAAC,SAAD,oBAAeG,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OADa,gBAGb,oBAAC,QAAD;AAAU,MAAA,EAAE,EAAC,GAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MANN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADF;AAYD;;AAED,eAAeJ,GAAf","sourcesContent":["import React, { lazy, useState } from 'react'\r\nimport { BrowserRouter as Router, Switch, Route, Redirect } from 'react-router-dom'\r\nimport AccessibleNavigationAnnouncer from './components/AccessibleNavigationAnnouncer'\r\n\r\nconst Layout = lazy(() => import('./containers/Layout'))\r\nconst Login = lazy(() => import('./pages/Login'))\r\n\r\nfunction App() {\r\n  // State to track whether the user is authenticated\r\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n\r\n  // Function to handle successful login\r\n  const handleLogin = () => {\r\n    // Perform login logic here\r\n    // For now, just set isAuthenticated to true\r\n    setIsAuthenticated(true);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Router>\r\n        <AccessibleNavigationAnnouncer />\r\n        <Switch>\r\n          {/* Route to the login page */}\r\n          <Route exact path=\"/\" render={(props) => <Login {...props} onLogin={handleLogin} />} />\r\n          {/* Private route for the dashboard */}\r\n          <PrivateRoute path=\"/dashboard\" component={Layout} isAuthenticated={isAuthenticated} />\r\n          {/* Redirect any other route to the login page */}\r\n          <Redirect to=\"/\" />\r\n        </Switch>\r\n      </Router>\r\n    </>\r\n  )\r\n}\r\n\r\n// PrivateRoute component to render the component only if the user is authenticated\r\nfunction PrivateRoute({ component: Component, isAuthenticated, ...rest }) {\r\n  return (\r\n    <Route\r\n      {...rest}\r\n      render={(props) =>\r\n        isAuthenticated ? (\r\n          <Component {...props} />\r\n        ) : (\r\n          <Redirect to=\"/\" />\r\n        )\r\n      }\r\n    />\r\n  );\r\n}\r\n\r\nexport default App\r\n"]},"metadata":{},"sourceType":"module"}