{"ast":null,"code":"var _jsxFileName = \"D:\\\\fullstack2025\\\\courseRgeistration\\\\src\\\\components\\\\AccessibleNavigationAnnouncer.js\";\nimport React, { useState, useEffect } from 'react';\nimport { useLocation } from 'react-router-dom';\n\nfunction AccessibleNavigationAnnouncer() {\n  const [message, setMessage] = useState('');\n  const location = useLocation();\n  useEffect(() => {\n    let timeoutId; // declare a variable to hold the timeout id\n    // ignore the /\n\n    if (location.pathname.slice(1)) {\n      // make sure navigation has occurred and screen reader is ready\n      timeoutId = setTimeout(() => setMessage(`Navigated to ${location.pathname.slice(1)} page.`), 500);\n    } else {\n      setMessage('');\n    } // cleanup function to clear the timeout\n\n\n    return () => clearTimeout(timeoutId);\n  }, [location]);\n  return /*#__PURE__*/React.createElement(\"span\", {\n    className: \"sr-only\",\n    role: \"status\",\n    \"aria-live\": \"polite\",\n    \"aria-atomic\": \"true\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 5\n    }\n  }, message);\n}\n\nexport default AccessibleNavigationAnnouncer;","map":{"version":3,"sources":["D:/fullstack2025/courseRgeistration/src/components/AccessibleNavigationAnnouncer.js"],"names":["React","useState","useEffect","useLocation","AccessibleNavigationAnnouncer","message","setMessage","location","timeoutId","pathname","slice","setTimeout","clearTimeout"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,WAAT,QAA4B,kBAA5B;;AAEA,SAASC,6BAAT,GAAyC;AACvC,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBL,QAAQ,CAAC,EAAD,CAAtC;AACA,QAAMM,QAAQ,GAAGJ,WAAW,EAA5B;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIM,SAAJ,CADc,CACA;AAEd;;AACA,QAAID,QAAQ,CAACE,QAAT,CAAkBC,KAAlB,CAAwB,CAAxB,CAAJ,EAAgC;AAC9B;AACAF,MAAAA,SAAS,GAAGG,UAAU,CAAC,MAAML,UAAU,CAAE,gBAAeC,QAAQ,CAACE,QAAT,CAAkBC,KAAlB,CAAwB,CAAxB,CAA2B,QAA5C,CAAjB,EAAuE,GAAvE,CAAtB;AACD,KAHD,MAGO;AACLJ,MAAAA,UAAU,CAAC,EAAD,CAAV;AACD,KATa,CAWd;;;AACA,WAAO,MAAMM,YAAY,CAACJ,SAAD,CAAzB;AAED,GAdQ,EAcN,CAACD,QAAD,CAdM,CAAT;AAgBA,sBACE;AAAM,IAAA,SAAS,EAAC,SAAhB;AAA0B,IAAA,IAAI,EAAC,QAA/B;AAAwC,iBAAU,QAAlD;AAA2D,mBAAY,MAAvE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGF,OADH,CADF;AAKD;;AAED,eAAeD,6BAAf","sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport { useLocation } from 'react-router-dom'\r\n\r\nfunction AccessibleNavigationAnnouncer() {\r\n  const [message, setMessage] = useState('')\r\n  const location = useLocation()\r\n\r\n  useEffect(() => {\r\n    let timeoutId // declare a variable to hold the timeout id\r\n\r\n    // ignore the /\r\n    if (location.pathname.slice(1)) {\r\n      // make sure navigation has occurred and screen reader is ready\r\n      timeoutId = setTimeout(() => setMessage(`Navigated to ${location.pathname.slice(1)} page.`), 500)\r\n    } else {\r\n      setMessage('')\r\n    }\r\n\r\n    // cleanup function to clear the timeout\r\n    return () => clearTimeout(timeoutId)\r\n\r\n  }, [location])\r\n\r\n  return (\r\n    <span className=\"sr-only\" role=\"status\" aria-live=\"polite\" aria-atomic=\"true\">\r\n      {message}\r\n    </span>\r\n  )\r\n}\r\n\r\nexport default AccessibleNavigationAnnouncer\r\n"]},"metadata":{},"sourceType":"module"}