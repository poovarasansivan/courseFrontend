{"ast":null,"code":"var _jsxFileName = \"D:\\\\fullstack2025\\\\courseRgeistration\\\\src\\\\pages\\\\courseForms.js\";\nimport React, { useState, useEffect } from \"react\";\nimport PageTitle from \"../components/Typography/PageTitle\";\nimport { Input, Label, Select } from \"@windmill/react-ui\";\nimport { Button } from \"@windmill/react-ui\";\n\nfunction Forms() {\n  const [academicYear, setAcademicYear] = useState(\"\");\n  const [selectedCourse1, setSelectedCourse1] = useState(\"\");\n  const [selectedCourse2, setSelectedCourse2] = useState(\"\");\n  const [honoursMinors, setHonoursMinors] = useState(\"\"); // New state for honours/minors registration\n\n  const [openElective, setopenElective] = useState(\"\");\n  const [addonCourse, setAddonCourse] = useState(\"\");\n  const [electiveCourseOptions, setElectiveCourseOptions] = useState([]);\n  const [openElectiveCourseOptions, setOpenElectiveCourseOptions] = useState([]);\n  const [addonCourseOptions, setAddonCourseOptions] = useState([]);\n  const rollno = sessionStorage.getItem(\"rollno\");\n  const name = sessionStorage.getItem(\"name\");\n  const department = sessionStorage.getItem(\"department\");\n  const semester = sessionStorage.getItem(\"semester\");\n\n  const handleCourseChange = (courseIndex, courseValue) => {\n    if (courseIndex === 1) {\n      setSelectedCourse1(courseValue);\n    } else if (courseIndex === 2) {\n      setSelectedCourse2(courseValue);\n    }\n  };\n\n  const handleopenElectiveChange = e => {\n    setopenElective(e.target.value);\n  };\n\n  const handleAddonCourseChange = e => {\n    setAddonCourse(e.target.value);\n  };\n\n  useEffect(() => {\n    if (semester && department) {\n      fetchElectiveCourseOptions(semester, department);\n    }\n  }, [semester, department]);\n\n  const fetchElectiveCourseOptions = async (semester, department) => {\n    try {\n      const response = await fetch(`http://localhost:5555/electivecourseoption/${semester}/${department}`);\n\n      if (response.ok) {\n        const data = await response.json();\n        const courseNames = data.map(course => course.course_name);\n        setElectiveCourseOptions(courseNames);\n      } else {\n        console.error(\"Failed to fetch elective course options\");\n      }\n    } catch (error) {\n      console.error(\"Error fetching elective course options:\", error);\n    }\n  };\n\n  useEffect(() => {\n    if (semester && department) {\n      fetchOpenElectiveCourseOptions(semester, department);\n      fetchAddonCourseOptions(semester, department);\n    }\n  }, [semester, department]);\n\n  const fetchOpenElectiveCourseOptions = async (semester, department) => {\n    try {\n      const response = await fetch(`http://localhost:5555/openelectiveoption/${semester}/${department}`);\n\n      if (response.ok) {\n        const data = await response.json(); // Extracting course names from the API response\n\n        const courseNames = data.map(course => course.course_name); // Set elective course options to courseNames\n\n        setOpenElectiveCourseOptions(courseNames);\n      } else {\n        console.error(\"Failed to fetch elective course options\");\n      }\n    } catch (error) {\n      console.error(\"Error fetching elective course options:\", error);\n    }\n  };\n\n  const fetchAddonCourseOptions = async (semester, department) => {\n    try {\n      const response = await fetch(`http://localhost:5555/addoncourseoption/${semester}/${department}`);\n\n      if (response.ok) {\n        const data = await response.json();\n        const courseNames = data.map(course => course.course_name);\n        setAddonCourseOptions(courseNames);\n      } else {\n        console.error(\"Failed to fetch elective course options\");\n      }\n    } catch (error) {\n      console.error(\"Error fetching elective course options:\", error);\n    }\n  };\n\n  const handleSubmit = async () => {\n    try {\n      // Form data to submit\n      const newRegistration = {\n        rollno,\n        name,\n        academic_year: academicYear,\n        semester,\n        department,\n        honours: honoursMinors,\n        electivecourse_1: selectedCourse1,\n        electivecourse_2: selectedCourse2,\n        open_electivecourse: openElective,\n        addon_course: addonCourse\n      };\n      const response = await fetch(\"http://localhost:5555/registerCourse\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(newRegistration)\n      });\n\n      if (response.ok) {\n        console.log(\"Form submitted successfully\");\n        setSelectedCourse1(\"\");\n        setSelectedCourse2(\"\");\n        setopenElective(\"\");\n        setAddonCourse(\"\");\n      } else {\n        console.error(\"Failed to submit form\"); // Handle error\n      }\n    } catch (error) {\n      console.error(\"Error submitting form:\", error); // Handle error\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(PageTitle, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 7\n    }\n  }, \"Course Registration\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"px-4 py-3 mb-8 bg-white rounded-lg shadow-md dark:bg-gray-800\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"mt-4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Label, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 11\n    }\n  }, \"Elective Course 1\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"mt-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Select, {\n    className: \"mt-1\",\n    value: selectedCourse1,\n    onChange: e => handleCourseChange(1, e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"option\", {\n    value: \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 15\n    }\n  }, \"Select Course\"), electiveCourseOptions.map((course, index) => /*#__PURE__*/React.createElement(\"option\", {\n    key: index,\n    value: course,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 17\n    }\n  }, course))))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"mt-4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Label, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 11\n    }\n  }, \"Elective Course 2\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"mt-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Select, {\n    className: \"mt-1\",\n    value: selectedCourse2,\n    onChange: e => handleCourseChange(2, e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"option\", {\n    value: \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 15\n    }\n  }, \"Select Course\"), electiveCourseOptions.filter(course => course !== selectedCourse1) // Filter out the selected course for Elective Course 1\n  .map((course, index) => /*#__PURE__*/React.createElement(\"option\", {\n    key: index,\n    value: course,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 19\n    }\n  }, course))))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"mt-4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Label, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 11\n    }\n  }, \"Open Elective Course\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"mt-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Select, {\n    className: \"mt-1\",\n    value: openElective,\n    onChange: handleopenElectiveChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"option\", {\n    value: \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 15\n    }\n  }, \"Select Course\"), openElectiveCourseOptions.map((course, index) => /*#__PURE__*/React.createElement(\"option\", {\n    key: index,\n    value: course,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 17\n    }\n  }, course))))), honoursMinors === \"NO\" && openElectiveCourseOptions.length > 0 && /*#__PURE__*/React.createElement(\"div\", {\n    className: \"mt-4\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Label, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 13\n    }\n  }, \"Addon Course \"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"mt-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Select, {\n    className: \"mt-1\",\n    value: addonCourse,\n    onChange: handleAddonCourseChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(\"option\", {\n    value: \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 17\n    }\n  }, \"Select Course\"), addonCourseOptions.map((course, index) => /*#__PURE__*/React.createElement(\"option\", {\n    key: index,\n    value: course,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 19\n    }\n  }, course))))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"mt-5\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 230,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    onClick: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 11\n    }\n  }, \"Register\"))));\n}\n\nexport default Forms;","map":{"version":3,"sources":["D:/fullstack2025/courseRgeistration/src/pages/courseForms.js"],"names":["React","useState","useEffect","PageTitle","Input","Label","Select","Button","Forms","academicYear","setAcademicYear","selectedCourse1","setSelectedCourse1","selectedCourse2","setSelectedCourse2","honoursMinors","setHonoursMinors","openElective","setopenElective","addonCourse","setAddonCourse","electiveCourseOptions","setElectiveCourseOptions","openElectiveCourseOptions","setOpenElectiveCourseOptions","addonCourseOptions","setAddonCourseOptions","rollno","sessionStorage","getItem","name","department","semester","handleCourseChange","courseIndex","courseValue","handleopenElectiveChange","e","target","value","handleAddonCourseChange","fetchElectiveCourseOptions","response","fetch","ok","data","json","courseNames","map","course","course_name","console","error","fetchOpenElectiveCourseOptions","fetchAddonCourseOptions","handleSubmit","newRegistration","academic_year","honours","electivecourse_1","electivecourse_2","open_electivecourse","addon_course","method","headers","body","JSON","stringify","log","index","filter","length"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,SAAP,MAAsB,oCAAtB;AACA,SAASC,KAAT,EAAgBC,KAAhB,EAAuBC,MAAvB,QAAqC,oBAArC;AACA,SAASC,MAAT,QAAuB,oBAAvB;;AAGA,SAASC,KAAT,GAAiB;AACf,QAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCT,QAAQ,CAAC,EAAD,CAAhD;AACA,QAAM,CAACU,eAAD,EAAkBC,kBAAlB,IAAwCX,QAAQ,CAAC,EAAD,CAAtD;AACA,QAAM,CAACY,eAAD,EAAkBC,kBAAlB,IAAwCb,QAAQ,CAAC,EAAD,CAAtD;AACA,QAAM,CAACc,aAAD,EAAgBC,gBAAhB,IAAoCf,QAAQ,CAAC,EAAD,CAAlD,CAJe,CAIyC;;AACxD,QAAM,CAACgB,YAAD,EAAeC,eAAf,IAAkCjB,QAAQ,CAAC,EAAD,CAAhD;AACA,QAAM,CAACkB,WAAD,EAAcC,cAAd,IAAgCnB,QAAQ,CAAC,EAAD,CAA9C;AACA,QAAM,CAACoB,qBAAD,EAAwBC,wBAAxB,IAAoDrB,QAAQ,CAAC,EAAD,CAAlE;AACA,QAAM,CAACsB,yBAAD,EAA4BC,4BAA5B,IAA4DvB,QAAQ,CACxE,EADwE,CAA1E;AAGA,QAAM,CAACwB,kBAAD,EAAqBC,qBAArB,IAA8CzB,QAAQ,CAAC,EAAD,CAA5D;AAEA,QAAM0B,MAAM,GAAGC,cAAc,CAACC,OAAf,CAAuB,QAAvB,CAAf;AACA,QAAMC,IAAI,GAAGF,cAAc,CAACC,OAAf,CAAuB,MAAvB,CAAb;AACA,QAAME,UAAU,GAAGH,cAAc,CAACC,OAAf,CAAuB,YAAvB,CAAnB;AACA,QAAMG,QAAQ,GAAGJ,cAAc,CAACC,OAAf,CAAuB,UAAvB,CAAjB;;AAEA,QAAMI,kBAAkB,GAAG,CAACC,WAAD,EAAcC,WAAd,KAA8B;AACvD,QAAID,WAAW,KAAK,CAApB,EAAuB;AACrBtB,MAAAA,kBAAkB,CAACuB,WAAD,CAAlB;AACD,KAFD,MAEO,IAAID,WAAW,KAAK,CAApB,EAAuB;AAC5BpB,MAAAA,kBAAkB,CAACqB,WAAD,CAAlB;AACD;AACF,GAND;;AAQA,QAAMC,wBAAwB,GAAIC,CAAD,IAAO;AACtCnB,IAAAA,eAAe,CAACmB,CAAC,CAACC,MAAF,CAASC,KAAV,CAAf;AACD,GAFD;;AAGA,QAAMC,uBAAuB,GAAIH,CAAD,IAAO;AACrCjB,IAAAA,cAAc,CAACiB,CAAC,CAACC,MAAF,CAASC,KAAV,CAAd;AACD,GAFD;;AAIArC,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI8B,QAAQ,IAAID,UAAhB,EAA4B;AAC1BU,MAAAA,0BAA0B,CAACT,QAAD,EAAWD,UAAX,CAA1B;AACD;AACF,GAJQ,EAIN,CAACC,QAAD,EAAWD,UAAX,CAJM,CAAT;;AAKA,QAAMU,0BAA0B,GAAG,OAAOT,QAAP,EAAiBD,UAAjB,KAAgC;AACjE,QAAI;AACF,YAAMW,QAAQ,GAAG,MAAMC,KAAK,CACzB,8CAA6CX,QAAS,IAAGD,UAAW,EAD3C,CAA5B;;AAGA,UAAIW,QAAQ,CAACE,EAAb,EAAiB;AACf,cAAMC,IAAI,GAAG,MAAMH,QAAQ,CAACI,IAAT,EAAnB;AACA,cAAMC,WAAW,GAAGF,IAAI,CAACG,GAAL,CAAUC,MAAD,IAAYA,MAAM,CAACC,WAA5B,CAApB;AACA5B,QAAAA,wBAAwB,CAACyB,WAAD,CAAxB;AACD,OAJD,MAIO;AACLI,QAAAA,OAAO,CAACC,KAAR,CAAc,yCAAd;AACD;AACF,KAXD,CAWE,OAAOA,KAAP,EAAc;AACdD,MAAAA,OAAO,CAACC,KAAR,CAAc,yCAAd,EAAyDA,KAAzD;AACD;AACF,GAfD;;AAiBAlD,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI8B,QAAQ,IAAID,UAAhB,EAA4B;AAC1BsB,MAAAA,8BAA8B,CAACrB,QAAD,EAAWD,UAAX,CAA9B;AACAuB,MAAAA,uBAAuB,CAACtB,QAAD,EAAWD,UAAX,CAAvB;AACD;AACF,GALQ,EAKN,CAACC,QAAD,EAAWD,UAAX,CALM,CAAT;;AAMA,QAAMsB,8BAA8B,GAAG,OAAOrB,QAAP,EAAiBD,UAAjB,KAAgC;AACrE,QAAI;AACF,YAAMW,QAAQ,GAAG,MAAMC,KAAK,CACzB,4CAA2CX,QAAS,IAAGD,UAAW,EADzC,CAA5B;;AAGA,UAAIW,QAAQ,CAACE,EAAb,EAAiB;AACf,cAAMC,IAAI,GAAG,MAAMH,QAAQ,CAACI,IAAT,EAAnB,CADe,CAEf;;AACA,cAAMC,WAAW,GAAGF,IAAI,CAACG,GAAL,CAAUC,MAAD,IAAYA,MAAM,CAACC,WAA5B,CAApB,CAHe,CAIf;;AACA1B,QAAAA,4BAA4B,CAACuB,WAAD,CAA5B;AACD,OAND,MAMO;AACLI,QAAAA,OAAO,CAACC,KAAR,CAAc,yCAAd;AACD;AACF,KAbD,CAaE,OAAOA,KAAP,EAAc;AACdD,MAAAA,OAAO,CAACC,KAAR,CAAc,yCAAd,EAAyDA,KAAzD;AACD;AACF,GAjBD;;AAmBA,QAAME,uBAAuB,GAAG,OAAOtB,QAAP,EAAiBD,UAAjB,KAAgC;AAC9D,QAAI;AACF,YAAMW,QAAQ,GAAG,MAAMC,KAAK,CACzB,2CAA0CX,QAAS,IAAGD,UAAW,EADxC,CAA5B;;AAGA,UAAIW,QAAQ,CAACE,EAAb,EAAiB;AACf,cAAMC,IAAI,GAAG,MAAMH,QAAQ,CAACI,IAAT,EAAnB;AACA,cAAMC,WAAW,GAAGF,IAAI,CAACG,GAAL,CAAUC,MAAD,IAAYA,MAAM,CAACC,WAA5B,CAApB;AACAxB,QAAAA,qBAAqB,CAACqB,WAAD,CAArB;AACD,OAJD,MAIO;AACLI,QAAAA,OAAO,CAACC,KAAR,CAAc,yCAAd;AACD;AACF,KAXD,CAWE,OAAOA,KAAP,EAAc;AACdD,MAAAA,OAAO,CAACC,KAAR,CAAc,yCAAd,EAAyDA,KAAzD;AACD;AACF,GAfD;;AAiBA,QAAMG,YAAY,GAAG,YAAY;AAC/B,QAAI;AACF;AACA,YAAMC,eAAe,GAAG;AACtB7B,QAAAA,MADsB;AAEtBG,QAAAA,IAFsB;AAGtB2B,QAAAA,aAAa,EAAEhD,YAHO;AAItBuB,QAAAA,QAJsB;AAKtBD,QAAAA,UALsB;AAMtB2B,QAAAA,OAAO,EAAE3C,aANa;AAOtB4C,QAAAA,gBAAgB,EAAEhD,eAPI;AAQtBiD,QAAAA,gBAAgB,EAAE/C,eARI;AAStBgD,QAAAA,mBAAmB,EAAE5C,YATC;AAUtB6C,QAAAA,YAAY,EAAE3C;AAVQ,OAAxB;AAaA,YAAMuB,QAAQ,GAAG,MAAMC,KAAK,CAAC,sCAAD,EAAyC;AACnEoB,QAAAA,MAAM,EAAE,MAD2D;AAEnEC,QAAAA,OAAO,EAAE;AACP,0BAAgB;AADT,SAF0D;AAKnEC,QAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeX,eAAf;AAL6D,OAAzC,CAA5B;;AAQA,UAAId,QAAQ,CAACE,EAAb,EAAiB;AACfO,QAAAA,OAAO,CAACiB,GAAR,CAAY,6BAAZ;AACAxD,QAAAA,kBAAkB,CAAC,EAAD,CAAlB;AACAE,QAAAA,kBAAkB,CAAC,EAAD,CAAlB;AACAI,QAAAA,eAAe,CAAC,EAAD,CAAf;AACAE,QAAAA,cAAc,CAAC,EAAD,CAAd;AACD,OAND,MAMO;AACL+B,QAAAA,OAAO,CAACC,KAAR,CAAc,uBAAd,EADK,CAEL;AACD;AACF,KAjCD,CAiCE,OAAOA,KAAP,EAAc;AACdD,MAAAA,OAAO,CAACC,KAAR,CAAc,wBAAd,EAAwCA,KAAxC,EADc,CAEd;AACD;AACF,GAtCD;;AAwCA,sBACE,uDACE,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BADF,eAEE;AAAK,IAAA,SAAS,EAAC,+DAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBADF,eAEE;AAAK,IAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,MAAD;AACE,IAAA,SAAS,EAAC,MADZ;AAEE,IAAA,KAAK,EAAEzC,eAFT;AAGE,IAAA,QAAQ,EAAG0B,CAAD,IAAOJ,kBAAkB,CAAC,CAAD,EAAII,CAAC,CAACC,MAAF,CAASC,KAAb,CAHrC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAKE;AAAQ,IAAA,KAAK,EAAC,EAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBALF,EAMGlB,qBAAqB,CAAC2B,GAAtB,CAA0B,CAACC,MAAD,EAASoB,KAAT,kBACzB;AAAQ,IAAA,GAAG,EAAEA,KAAb;AAAoB,IAAA,KAAK,EAAEpB,MAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGA,MADH,CADD,CANH,CADF,CAFF,CADF,eAkBE;AAAK,IAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBADF,eAEE;AAAK,IAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,MAAD;AACE,IAAA,SAAS,EAAC,MADZ;AAEE,IAAA,KAAK,EAAEpC,eAFT;AAGE,IAAA,QAAQ,EAAGwB,CAAD,IAAOJ,kBAAkB,CAAC,CAAD,EAAII,CAAC,CAACC,MAAF,CAASC,KAAb,CAHrC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAKE;AAAQ,IAAA,KAAK,EAAC,EAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBALF,EAMGlB,qBAAqB,CACnBiD,MADF,CACUrB,MAAD,IAAYA,MAAM,KAAKtC,eADhC,EACiD;AADjD,GAEEqC,GAFF,CAEM,CAACC,MAAD,EAASoB,KAAT,kBACH;AAAQ,IAAA,GAAG,EAAEA,KAAb;AAAoB,IAAA,KAAK,EAAEpB,MAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGA,MADH,CAHH,CANH,CADF,CAFF,CAlBF,eAsCE;AAAK,IAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BADF,eAEE;AAAK,IAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,MAAD;AACE,IAAA,SAAS,EAAC,MADZ;AAEE,IAAA,KAAK,EAAEhC,YAFT;AAGE,IAAA,QAAQ,EAAEmB,wBAHZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAKE;AAAQ,IAAA,KAAK,EAAC,EAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBALF,EAMGb,yBAAyB,CAACyB,GAA1B,CAA8B,CAACC,MAAD,EAASoB,KAAT,kBAC7B;AAAQ,IAAA,GAAG,EAAEA,KAAb;AAAoB,IAAA,KAAK,EAAEpB,MAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGA,MADH,CADD,CANH,CADF,CAFF,CAtCF,EAwDGlC,aAAa,KAAK,IAAlB,IAA0BQ,yBAAyB,CAACgD,MAA1B,GAAmC,CAA7D,iBACC;AAAK,IAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBADF,eAEE;AAAK,IAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,MAAD;AACE,IAAA,SAAS,EAAC,MADZ;AAEE,IAAA,KAAK,EAAEpD,WAFT;AAGE,IAAA,QAAQ,EAAEqB,uBAHZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAKE;AAAQ,IAAA,KAAK,EAAC,EAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBALF,EAMGf,kBAAkB,CAACuB,GAAnB,CAAuB,CAACC,MAAD,EAASoB,KAAT,kBACtB;AAAQ,IAAA,GAAG,EAAEA,KAAb;AAAoB,IAAA,KAAK,EAAEpB,MAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGA,MADH,CADD,CANH,CADF,CAFF,CAzDJ,eAmFE;AAAK,IAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,MAAD;AAAQ,IAAA,OAAO,EAAEM,YAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,CAnFF,CAFF,CADF;AA4FD;;AAED,eAAe/C,KAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport PageTitle from \"../components/Typography/PageTitle\";\r\nimport { Input, Label, Select } from \"@windmill/react-ui\";\r\nimport { Button } from \"@windmill/react-ui\";\r\n\r\n\r\nfunction Forms() {\r\n  const [academicYear, setAcademicYear] = useState(\"\");\r\n  const [selectedCourse1, setSelectedCourse1] = useState(\"\");\r\n  const [selectedCourse2, setSelectedCourse2] = useState(\"\");\r\n  const [honoursMinors, setHonoursMinors] = useState(\"\"); // New state for honours/minors registration\r\n  const [openElective, setopenElective] = useState(\"\");\r\n  const [addonCourse, setAddonCourse] = useState(\"\");\r\n  const [electiveCourseOptions, setElectiveCourseOptions] = useState([]);\r\n  const [openElectiveCourseOptions, setOpenElectiveCourseOptions] = useState(\r\n    []\r\n  );\r\n  const [addonCourseOptions, setAddonCourseOptions] = useState([]);\r\n\r\n  const rollno = sessionStorage.getItem(\"rollno\");\r\n  const name = sessionStorage.getItem(\"name\");\r\n  const department = sessionStorage.getItem(\"department\");\r\n  const semester = sessionStorage.getItem(\"semester\");\r\n\r\n  const handleCourseChange = (courseIndex, courseValue) => {\r\n    if (courseIndex === 1) {\r\n      setSelectedCourse1(courseValue);\r\n    } else if (courseIndex === 2) {\r\n      setSelectedCourse2(courseValue);\r\n    }\r\n  };\r\n\r\n  const handleopenElectiveChange = (e) => {\r\n    setopenElective(e.target.value);\r\n  };\r\n  const handleAddonCourseChange = (e) => {\r\n    setAddonCourse(e.target.value);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (semester && department) {\r\n      fetchElectiveCourseOptions(semester, department);\r\n    }\r\n  }, [semester, department]);\r\n  const fetchElectiveCourseOptions = async (semester, department) => {\r\n    try {\r\n      const response = await fetch(\r\n        `http://localhost:5555/electivecourseoption/${semester}/${department}`\r\n      );\r\n      if (response.ok) {\r\n        const data = await response.json();\r\n        const courseNames = data.map((course) => course.course_name);\r\n        setElectiveCourseOptions(courseNames);\r\n      } else {\r\n        console.error(\"Failed to fetch elective course options\");\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error fetching elective course options:\", error);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (semester && department) {\r\n      fetchOpenElectiveCourseOptions(semester, department);\r\n      fetchAddonCourseOptions(semester, department);\r\n    }\r\n  }, [semester, department]);\r\n  const fetchOpenElectiveCourseOptions = async (semester, department) => {\r\n    try {\r\n      const response = await fetch(\r\n        `http://localhost:5555/openelectiveoption/${semester}/${department}`\r\n      );\r\n      if (response.ok) {\r\n        const data = await response.json();\r\n        // Extracting course names from the API response\r\n        const courseNames = data.map((course) => course.course_name);\r\n        // Set elective course options to courseNames\r\n        setOpenElectiveCourseOptions(courseNames);\r\n      } else {\r\n        console.error(\"Failed to fetch elective course options\");\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error fetching elective course options:\", error);\r\n    }\r\n  };\r\n\r\n  const fetchAddonCourseOptions = async (semester, department) => {\r\n    try {\r\n      const response = await fetch(\r\n        `http://localhost:5555/addoncourseoption/${semester}/${department}`\r\n      );\r\n      if (response.ok) {\r\n        const data = await response.json();\r\n        const courseNames = data.map((course) => course.course_name);\r\n        setAddonCourseOptions(courseNames);\r\n      } else {\r\n        console.error(\"Failed to fetch elective course options\");\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error fetching elective course options:\", error);\r\n    }\r\n  };\r\n\r\n  const handleSubmit = async () => {\r\n    try {\r\n      // Form data to submit\r\n      const newRegistration = {\r\n        rollno,\r\n        name,\r\n        academic_year: academicYear,\r\n        semester,\r\n        department,\r\n        honours: honoursMinors,\r\n        electivecourse_1: selectedCourse1,\r\n        electivecourse_2: selectedCourse2,\r\n        open_electivecourse: openElective,\r\n        addon_course: addonCourse,\r\n      };\r\n\r\n      const response = await fetch(\"http://localhost:5555/registerCourse\", {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify(newRegistration),\r\n      });\r\n\r\n      if (response.ok) {\r\n        console.log(\"Form submitted successfully\");\r\n        setSelectedCourse1(\"\");\r\n        setSelectedCourse2(\"\");\r\n        setopenElective(\"\");\r\n        setAddonCourse(\"\");\r\n      } else {\r\n        console.error(\"Failed to submit form\");\r\n        // Handle error\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error submitting form:\", error);\r\n      // Handle error\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <PageTitle>Course Registration</PageTitle>\r\n      <div className=\"px-4 py-3 mb-8 bg-white rounded-lg shadow-md dark:bg-gray-800\">\r\n        <div className=\"mt-4\">\r\n          <Label>Elective Course 1</Label>\r\n          <div className=\"mt-2\">\r\n            <Select\r\n              className=\"mt-1\"\r\n              value={selectedCourse1}\r\n              onChange={(e) => handleCourseChange(1, e.target.value)}\r\n            >\r\n              <option value=\"\">Select Course</option>\r\n              {electiveCourseOptions.map((course, index) => (\r\n                <option key={index} value={course}>\r\n                  {course}\r\n                </option>\r\n              ))}\r\n            </Select>\r\n          </div>\r\n        </div>\r\n        <div className=\"mt-4\">\r\n          <Label>Elective Course 2</Label>\r\n          <div className=\"mt-2\">\r\n            <Select\r\n              className=\"mt-1\"\r\n              value={selectedCourse2}\r\n              onChange={(e) => handleCourseChange(2, e.target.value)}\r\n            >\r\n              <option value=\"\">Select Course</option>\r\n              {electiveCourseOptions\r\n                .filter((course) => course !== selectedCourse1) // Filter out the selected course for Elective Course 1\r\n                .map((course, index) => (\r\n                  <option key={index} value={course}>\r\n                    {course}\r\n                  </option>\r\n                ))}\r\n            </Select>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"mt-4\">\r\n          <Label>Open Elective Course</Label>\r\n          <div className=\"mt-2\">\r\n            <Select\r\n              className=\"mt-1\"\r\n              value={openElective}\r\n              onChange={handleopenElectiveChange}\r\n            >\r\n              <option value=\"\">Select Course</option>\r\n              {openElectiveCourseOptions.map((course, index) => (\r\n                <option key={index} value={course}>\r\n                  {course}\r\n                </option>\r\n              ))}\r\n            </Select>\r\n          </div>\r\n        </div>\r\n\r\n        {honoursMinors === \"NO\" && openElectiveCourseOptions.length > 0 && (\r\n          <div className=\"mt-4\">\r\n            <Label>Addon Course </Label>\r\n            <div className=\"mt-2\">\r\n              <Select\r\n                className=\"mt-1\"\r\n                value={addonCourse}\r\n                onChange={handleAddonCourseChange}\r\n              >\r\n                <option value=\"\">Select Course</option>\r\n                {addonCourseOptions.map((course, index) => (\r\n                  <option key={index} value={course}>\r\n                    {course}\r\n                  </option>\r\n                ))}\r\n              </Select>\r\n            </div>\r\n          </div>\r\n        )}\r\n\r\n        {/* <Label className=\"mt-6\" check>\r\n          <Input type=\"checkbox\" />\r\n          <span className=\"ml-2\">\r\n            I agree to the{\" \"}\r\n            <span className=\"text-gray-500\">terms and conditions.</span>\r\n          </span>\r\n        </Label> */}\r\n        <div className=\"mt-5\">\r\n          <Button onClick={handleSubmit}>Register</Button>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Forms;\r\n"]},"metadata":{},"sourceType":"module"}